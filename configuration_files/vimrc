syntax on

set nocompatible              " be iMproved, required
filetype off                  " required

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins declarations start
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin()
" Undo managment
Plug 'mbbill/undotree'

" NERDTree
Plug 'scrooloose/nerdtree'
let NERDTreeIgnore = ['\.o$'] 
let g:NERDTreeNodeDelimiter = "\u00a0"

" Plug to show a status bar
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Plugin to manage Git
Plug 'tpope/vim-fugitive'

" Fugitive is required for Conflicted
Plug 'christoomey/vim-conflicted'

" Plugin to open files quickly """"""""""""""""""""""""""""""""""""""""
Plug 'junegunn/fzf'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" git signs, e.g. added, modified, etc.
Plug 'mhinz/vim-signify'

Plug 'flazz/vim-colorschemes'

Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Run async commands
Plug 'skywind3000/asyncrun.vim'

Plug 'vim-scripts/DoxygenToolkit.vim'

Plug 'cespare/vim-toml', { 'branch': 'main'}

" Add maktaba and codefmt to the runtimepath.
" (The latter must be installed before it can be used.)
Plug 'google/vim-maktaba'
Plug 'google/vim-codefmt'
" Also add Glaive, which is used to configure codefmt's maktaba flags. See
" `:help :Glaive` for usage.
Plug 'google/vim-glaive'

" Alternate between cpp and h
Plug 'vim-scripts/a.vim'

Plug 'Shougo/echodoc.vim'

"Plugin for do quick snipest """"""""""""""""""""""""""""""""""""""""""
"Plug 'SirVer/ultisnips'

" Plujin to add comments
Plug 'tpope/vim-commentary'

" Auto-pairs (to complete {, (, [, etc.)
Plug 'jiangmiao/auto-pairs'

Plug 'rhysd/vim-clang-format'
" All of your Plugins must be added before the following line
call plug#end()            " required
" the glaive#Install() should go after the "call plug#end()"
call glaive#Install()
filetype plugin on
filetype indent on
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins declarations end
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins configuration start
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configurations 'mbbill/undotree'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <F5> :UndotreeToggle<cr>
set undodir=~/.undodir/
set undofile

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configurations 'scrooloose/nerdtree'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Close VIM when only NERDTree is open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" Use Ctrl-n in normal mode to toggle NERDTree
nmap <C-n> :NERDTreeToggle<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configurations 'vim-airline/vim-airline'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configurations 'tpope/vim-fugitive'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configurations 'christoomey/vim-conflicted'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configurations 'junegunn/fzf'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <SPACE>o :FZF<CR>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configurations 'mhinz/vim-signify'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <leader>d :SignifyHunkDiff<CR>
nmap <leader>diff :SignifyDiff<CR>
nmap <leader>tq :tabclose<CR>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configurations 'flazz/vim-colorschemes'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:solarized_termtrans=1 " work with MobaXterm
set background=dark
colorscheme solarized
" colorscheme Monokai
" colorscheme afterglow
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configurations 'neoclide/coc.nvim', {'branch': 'release'}
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)
set nowritebackup

" Having longer updatetime (default is 4000 ms = 4s) leads to noticeable
" delays and poor user experience
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostcs appear/become resolved
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><C-p> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
" inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() <CR>"
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> <leader>gg <Plug>(coc-definition)
nmap <silent> <leader>gy <Plug>(coc-type-definition)
nmap <silent> <leader>gi <Plug>(coc-implementation)
nmap <silent> <leader>gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configurations 'skywind3000/asyncrun.vim'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:asyncrun_open = 10

" Show the status bar all the time
set laststatus=2
" Use powerline fonts with the status bar
let g:airline_powerline_fonts = 1
" Define theme status bar
let g:airline_theme='light'

autocmd FileType c,cc,cpp,cmake,h,hh,hpp map <buffer> <leader><space> :AsyncRun ninja<cr>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configurations 'vim-scripts/DoxygenToolkit.vim'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"let g:DoxygenToolkit_commentType = "C++"
" author info
let g:DoxygenToolkit_authorName = 'Anibal Siguenza-Torres'
"nmap <leader>dg :Dox<cr>
"nmap <leader>dga :DoxAuthor<cr>
"" license announcement
"nmap <leader>dgl :DoxLic<cr>
autocmd FileType c,cc,cpp map <buffer> <leader>dg :Dox<cr>
autocmd FileType c,cc,cpp map <buffer> <leader>dga :DoxAuthor<cr>
autocmd FileType c,cc,cpp map <buffer> <leader>dgl :DoxLic<cr>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configurations 'cespare/vim-toml', { 'branch': 'main'}
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configurations 'google/vim-maktaba' 'google/vim-glaive' 'vim-scripts/a.vim'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Glaive codefmt plugin[mappings] clang_format_style='Google'
" Optional: Enable codefmt's default mappings on the <Leader>= prefix.
" Glaive codefmt plugin[mappings]
" Glaive vim-clang-format default_mappings
" Glaive codefmt clang_format_style=`'file:' . $VIMDATA .'/_clang-format'`
" augroup autoformat_settings
  " autocmd FileType c,cpp,proto,javascript clang-format
"   " autocmd FileType python autopep8
"   " autocmd FileType html,css,sass,scss,less,json js-beautify
" augroup END
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configurations 'Shougo/echodoc.vim'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configurations 'SirVer/ultisnips'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<c-u>"
" let g:UltiSnipsJumpForwardTrigger = "<tab>"
" let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsSnippetDirectories = ['~/.vim/mydata/UltiSnips']
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configurations 'tpope/vim-commentary'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Toggle comments with <SPACE>c
nmap <SPACE>c :Commentary<CR>
vmap <SPACE>c :Commentary<CR>
autocmd FileType c setlocal commentstring=//\ %s
autocmd FileType cpp setlocal commentstring=//\ %s
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configurations 'jiangmiao/auto-pairs'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Configurations 'rhysd/vim-clang-format'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:clang_format#style = 'Google'
" Format the entire file
nnoremap <leader>cf :ClangFormat<CR>
" Format the selected text in visual mode
vnoremap <leader>cf :ClangFormat<CR>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins configuration end
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Extra configurations
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" encoding
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8

"Show all the coincidence in searh"
:set hlsearch
nmap <F6> :nohlsearch<CR>

"Highlight cursor"
hi CursorLine term=underline cterm=underline gui=underline

set wildmenu

"Insert line without leaving normal mode"
" nmap <S-Enter> O<Esc>
" nmap <CR> o<Esc>

" Identation and other stuff
set tabstop=4
set softtabstop=4
set shiftwidth=4
set smarttab
set expandtab
" to show the tabs
set list
set listchars=tab:>-
set autoindent
set smartindent

"Line number and line number modes
set number
nmap <SPACE>r :set relativenumber<CR>
nmap <SPACE>n :set norelativenumber<CR>

" Save and exit in normal mode with Ctrl-c
nmap <C-c> :wq<CR>

" in normal mode F2 will save the file
nmap <F2> :FormatCode<CR>:w<CR>

" in insert mode F2 will exit insert, save, enters insert again
imap <F2> <ESC>:FormatCode<CR>:w<CR>

" Stay in same word while searching
nmap * *N
"go to the shell
map gs :sh <CR>

"paste and keep word
"vmap <SPACE>p: p<ESC>gvy

" Navigate between windows using <SPACE>+Arrows
nmap <SPACE><Up> <C-w>k
nmap <SPACE><Down> <C-w>j
nmap <SPACE><Left> <C-w>h
nmap <SPACE><Right> <C-w>l

nmap <SPACE>k <C-w>k
nmap <SPACE>j <C-w>j
nmap <SPACE>h <C-w>h
nmap <SPACE>l <C-w>l

" Search and replace
nmap <SPACE>H "zyiw:%s/<C-r>z//gc<LEFT><LEFT><LEFT>

" c++ specifics config ***************************************************
" seach all occurrences of a expresion recursivelly in cpp and h
nmap <F7> "zyiw:vimgrep <C-r>z **/*.cpp<CR> :cw<CR>
nmap <F8> "zyiw:vimgrep <C-r>z **/*.h<CR> :cw<CR>
"***************************************************************************

" * Set to auto read when a file is changed from the outside
set autoread

" * Restore cursor to file position in previous editing session
set viminfo='10,\"100,:20,n~/.viminfo
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif

"  Settings for compMobaXterm
hi! clear Pmenu
hi! Pmenu term=bold,reverse cterm=bold ctermfg=5 ctermbg=0 guibg=Magenta
hi! clear StatusLine
hi! StatusLine term=bold,reverse cterm=bold ctermfg=6 ctermbg=0 gui=bold,reverse
hi! clear PmenuThumb     
hi! PmenuThumb term=bold,reverse cterm=bold ctermfg=4 ctermbg=0 guibg=White
"  DONE - Settings for compMobaXterm

" load new config
nmap <leader>sc :source ~/.vimrc<cr>
